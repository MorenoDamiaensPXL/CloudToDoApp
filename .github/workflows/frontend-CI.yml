name: Frontend CI

on:
  push:
    branches: [main]

jobs:
  build:
    runs-on: ubuntu-latest

    defaults:
      run:
        working-directory: frontend

    steps:
      # 1) Code ophalen
      - name: Checkout
        uses: actions/checkout@v4

      # 2) Node.js klaarzetten (npm cache op frontend/packge-lock.json)
      - name: Setup Node.js environment
        uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: npm
          cache-dependency-path: frontend/package-lock.json

      # 3) Dependencies installeren
      - name: Install dependencies
        run: npm ci

      # 4) Build (mag falen, de focus is CI + tests)
      - name: Build the code
        run: npx ng build --configuration production || true

      # 5) Maak een CI-karma-config die altijd LCOV + HTML schrijft
      - name: Create CI Karma config (forces LCOV + HTML)
        run: |
          cat > karma.ci.conf.js <<'JS'
          const path = require('path');
          module.exports = function (config) {
            // Laad de bestaande karma.conf.js
            require('./karma.conf.js')(config);
            // Forceer coverage-reporters naar vaste plek
            config.set({
              reporters: ['progress', 'coverage'],
              coverageReporter: {
                dir: path.join(__dirname, 'coverage'),   // => frontend/coverage/
                reporters: [
                  { type: 'lcovonly', subdir: '.' },     // => frontend/coverage/lcov.info
                  { type: 'html',     subdir: 'html' }   // => frontend/coverage/html/
                ],
                fixWebpackSourcePaths: true
              }
            });
          };
          JS

      # 6) Tests draaien (headless Chrome zonder sandbox) + coverage
      - name: Run unit tests with CI Karma config (write LCOV)
        run: |
          set -euxo pipefail
          sudo apt-get update
          sudo apt-get install -y xvfb
          # Chrome wrapper zonder sandbox
          cat << 'SH' > /tmp/chrome-no-sandbox.sh
          #!/usr/bin/env bash
          BIN="$(command -v google-chrome || command -v google-chrome-stable || command -v chromium || command -v chromium-browser)"
          exec "$BIN" --no-sandbox --disable-setuid-sandbox --disable-gpu --disable-dev-shm-usage "$@"
          SH
          chmod +x /tmp/chrome-no-sandbox.sh
          export CHROME_BIN=/tmp/chrome-no-sandbox.sh

          # Belangrijk: gebruik de CI-config; laat job doorlopen bij fails
          xvfb-run -a npx ng test --watch=false --browsers=ChromeHeadless --code-coverage --karma-config=karma.ci.conf.js || true

          echo "== After tests, list coverage files =="
          find coverage -type f -maxdepth 6 -print || true

      # 7) Normaliseer naar één pad (frontend/coverage/lcov.info).
      #    Als karma alleen coverage-final.json schrijft, converteer naar lcov met nyc.
      - name: Normalize coverage to LCOV (frontend/coverage/lcov.info)
        if: always()
        shell: bash
        run: |
          set -euo pipefail
          cd frontend
          mkdir -p coverage
          if [ -f coverage/lcov.info ] && [ -s coverage/lcov.info ]; then
            echo "✅ LCOV present at coverage/lcov.info"
          else
            JSON="$(find . -path ./node_modules -prune -o -type f -name 'coverage-final.json' -print | head -n1 || true)"
            if [ -n "${JSON:-}" ]; then
              COVDIR="$(dirname "$JSON")"
              echo "Generating LCOV via nyc from: $JSON"
              npx nyc@15.1.0 report --reporter=lcov -t "$COVDIR" --report-dir "$COVDIR"
              [ -f "$COVDIR/lcov.info" ] && cp "$COVDIR/lcov.info" coverage/lcov.info || true
            fi
            if [ -f coverage/lcov.info ] && [ -s coverage/lcov.info ]; then
              echo "✅ Normalized LCOV at coverage/lcov.info"
            else
              echo "❌ Still no usable LCOV."
            fi
          fi

      # 8) (Optioneel) Toon waar coverage staat voor debug
      - name: Inspect raw coverage tree
        if: always()
        run: |
          echo "PWD=$(pwd)"
          find . -type f \( -name 'lcov.info' -o -name 'coverage-final.json' \) -maxdepth 8 -print || true

      # 9) Verifieer dat LCOV bruikbaar is (niet leeg). Zo ja, maak het rapport.
      - name: Verify LCOV exists and is non-empty
        if: always()
        shell: bash
        run: |
          if [ ! -s frontend/coverage/lcov.info ]; then
            echo "No usable LCOV (missing or empty). Reporter will be skipped."
            exit 0
          fi
          echo "LCOV OK: $(wc -l frontend/coverage/lcov.info | awk '{print $1}') lines"

      # 10) Better Test Reports (mooie tabel in de run summary)
      - name: Better Test Reports Action
        if: ${{ always() && hashFiles('frontend/coverage/lcov.info') != '' }}
        uses: mridang/action-test-reporter@v1.3.0
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          coverage-file: frontend/coverage/lcov.info
          upload-coverage-report: true

      # 11) HTML coverage uploaden als artefact (open lokaal index.html)
      - name: Upload coverage HTML
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: |
            frontend/coverage/**
            frontend/**/coverage/**
          if-no-files-found: ignore
